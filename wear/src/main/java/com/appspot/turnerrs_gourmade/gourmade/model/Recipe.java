/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-03-26 20:30:19 UTC)
 * on 2015-04-27 at 03:30:30 UTC 
 * Modify at your own risk.
 */

package com.appspot.turnerrs_gourmade.gourmade.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.api.client.json.GenericJson;

import java.util.ArrayList;

/**
 * Model definition for Recipe.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the gourmade. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Recipe extends GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("cook_time")
  private java.lang.String cookTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entityKey;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String image;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Ingredient> ingredients;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("last_touch_date_time")
  private java.lang.String lastTouchDateTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("prep_time")
  private java.lang.String prepTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("recipe_title")
  private java.lang.String recipeTitle;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Step> steps;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getCookTime() {
    return cookTime;
  }

  /**
   * @param cookTime cookTime or {@code null} for none
   */
  public Recipe setCookTime(java.lang.String cookTime) {
    this.cookTime = cookTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEntityKey() {
    return entityKey;
  }

  /**
   * @param entityKey entityKey or {@code null} for none
   */
  public Recipe setEntityKey(java.lang.String entityKey) {
    this.entityKey = entityKey;
    return this;
  }

  /**
   * @see #decodeImage()
   * @return value or {@code null} for none
   */
  public java.lang.String getImage() {
    return image;
  }

  /**

   * @see #getImage()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeImage() {
    return com.google.api.client.util.Base64.decodeBase64(image);
  }

  /**
   * @see #encodeImage()
   * @param image image or {@code null} for none
   */
  public Recipe setImage(java.lang.String image) {
    this.image = image;
    return this;
  }

  /**

   * @see #setImage()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public Recipe encodeImage(byte[] image) {
    this.image = com.google.api.client.util.Base64.encodeBase64URLSafeString(image);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<Ingredient> getIngredients() {
    return ingredients;
  }

  /**
   * @param ingredients ingredients or {@code null} for none
   */
  public Recipe setIngredients(java.util.List<Ingredient> ingredients) {
    this.ingredients = ingredients;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getLastTouchDateTime() {
    return lastTouchDateTime;
  }

  /**
   * @param lastTouchDateTime lastTouchDateTime or {@code null} for none
   */
  public Recipe setLastTouchDateTime(java.lang.String lastTouchDateTime) {
    this.lastTouchDateTime = lastTouchDateTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getPrepTime() {
    return prepTime;
  }

  /**
   * @param prepTime prepTime or {@code null} for none
   */
  public Recipe setPrepTime(java.lang.String prepTime) {
    this.prepTime = prepTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRecipeTitle() {
    return recipeTitle;
  }

  /**
   * @param recipeTitle recipeTitle or {@code null} for none
   */
  public Recipe setRecipeTitle(java.lang.String recipeTitle) {
    this.recipeTitle = recipeTitle;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<Step> getSteps() {
    return steps;
  }

  /**
   * @param steps steps or {@code null} for none
   */
  public Recipe setSteps(java.util.List<Step> steps) {
    this.steps = steps;
    return this;
  }

  @Override
  public Recipe set(String fieldName, Object value) {
    return (Recipe) super.set(fieldName, value);
  }

  @Override
  public Recipe clone() {
    return (Recipe) super.clone();
  }

  public String[] getIngredientStringArray() {
    int iLength = ingredients.size();
    String[] array = new String[3 * iLength];
    for (int i = 0; i < iLength; i++) {
      array[3 * i] = ingredients.get(i).toStringArray()[0];
      array[3 * i + 1] = ingredients.get(i).toStringArray()[1];
      array[3 * i + 2] = ingredients.get(i).toStringArray()[2];
    }
    return array;
  }

  public String[] getStepStringArray() {
    int sLength = steps.size();
    String[] array = new String[3 * sLength];
    for (int i = 0; i < sLength; i++) {
      array[3 * i] = steps.get(i).toStringArray()[0];
      array[3 * i + 1] = steps.get(i).toStringArray()[1];
    }
    return array;
  }
}
